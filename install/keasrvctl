#!/bin/bash 

#control script for starting and stopping the kea service 

prog=keasrvctl
initdir=/etc/init.d
confpath=/etc/kea-service.conf

# Source function library.
if [ -r $initdir/functions ]; then
        . $initdir/functions
fi

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

#
# load customized configuration settings
#
if [ -r $confpath ]; then
        . $confpath
fi



# set the java class path
CLASSPATH="$KEAHOME/kea-service/kea_server.jar:$HEAHOME/$KEAJARS:$KEAHOME/$KEAJARS/lib/commons-logging.jar:$KEAHOME/$KEAJARS/lib/icu4j_3_4.jar:$KEAHOME/$KEAJARS/lib/iri.jar:$KEAHOME/$KEAJARS/lib/jena.jar:$KEAHOME/$KEAJARS/lib/snowball.jar:$KEAHOME/$KEAJARS/lib/weka.jar:$KEAHOME/$KEAJARS/lib/xercesImpl.jar:$KEAHOME/$KEAJARS/lib/kea-5.0.jar:$KEAHOME/kea-service/xmlrpc-1.2-b1.jar" 
export CLASSPATH
# set the PYTHON path 
PYTHONPATH=".:$KEAHOME/py_common" 
export PYTHONPATH
        
# program start block
# function for starting the java server
jv_start() {
        
    # check to see if the java pid file exists
    if [ -f $JAVA_RUN ]; then
                
       PID=`cat $JAVA_RUN`
       if [ $(ps -fp $PID | tail -n 1 | grep -c $JAVASRV ) -eq 0 ]; then
       	  echo "we have a pid: $PID but the process is gone removing pid file"
       	  echo "we have a pid: $PID but the process is gone removing pid file" >> $JAVALOG
      # remove the pid file
	  rm -f $JAVA_RUN
       else
          echo the java version of kea-service is already running: $PID
          echo the java version of kea-service is already running: $PID >> $JAVALOG
	  	  echo $(ps -fp $PID | tail -n 1 )
	      echo $(ps -fp $PID | tail -n 1 )>> $JAVALOG
	      # exit returning an error 
          exit 2;
       fi
    fi 
            
    # change dir to the location of the java class
    cd $KEAHOME/$KEAJARS
    #configure the command to start the java server        
    RUNCMD="cd $KEAHOME/$KEAJARS; export CLASSPATH=$CLASSPATH; /usr/bin/nohup java $JAVASRV $KEAMODEL $JVPORT 2>&1 >> $JAVALOG &"
    # start the java service running as the kea user redirect stderr and stdout to the log
    runuser -m -s /bin/bash -l $SRVUSER -c "$RUNCMD $*" 
	# capture the pid of the java server and write it to the poid file
    grep $JAVASRV /proc/*/cmdline | cut -d/ -f3 | head -1 > $JAVA_RUN

    PID=`cat $JAVA_RUN`
    
    echo -n $"Starting $JAVASRV: "
    echo  $"Starting $JAVASRV: " >> $JAVALOG

	# verify that the server is actually running
	# py looking for the process id we recorded associated with the name of the process
    if [ $(ps -fp $PID | tail -n 1 | grep -c $JAVASRV ) -eq 0 ]; then
		echo_failure
    	echo_failure >> $JAVALOG
    else
		echo_success
		echo_success >> $JAVALOG
    fi

    echo
}

# function for starting the python wrapper
py_start() {
                
    
    # check to see if the python pid file exists
    if [ -f $PY_RUN ]; then
                
       PID=`cat $PY_RUN`
       if [ $(ps -fp $PID | tail -n 1 | grep -c $PYSERV ) -eq 0 ]; then
       	  echo "we have a pid: $PID but the process is gone removing pid file"
       	  echo "we have a pid: $PID but the process is gone removing pid file" >> $PYLOG
	  rm -f $PY_RUN
       else
       	  echo python version of kea-service is already running: $PID
       	  echo python version of kea-service is already running: $PID >> $PYLOG
		  echo $(ps -fp $PID | tail -n 1 )
		  echo $(ps -fp $PID | tail -n 1 ) >> $PYLOG
          exit 2;
       fi
    fi 
            
    # change to the directory where the python wrapper is installed
    cd  $KEAHOME/kea-service            

	#export the current path
    CWD=$(pwd)
    export PATH=.:$PATH:$(pwd)

	# setup the command to start the python wrapper
    RUNCMD="cd  $KEAHOME/kea-service; export PYTHONPATH=$PYTHONPATH; export PATH=.:$PATH:$CWD;/usr/bin/nohup ./$PYSERV 2>&1 >> $PYLOG &"
    # start the python wrapper redirecting stdout and stderr to the python log
    runuser -m -s /bin/bash - $SRVUSER -c "$RUNCMD  $*" 

    # capture the pid of the python wrapper ans store it in the pid file            
    grep $PYSERV /proc/*/cmdline | cut -d/ -f3 | head -1 > $PY_RUN

    PID=`cat $PY_RUN`
    
    echo -n $"Starting $PYSERV: "
    echo  $"Starting $PYSERV: " >> $PYLOG

	# verify that the server is actually running
	# py looking for the process id we recorded associated with the name of the process
    if [ $(ps -fp $PID | tail -n 1 | grep -c $PYSERV ) -eq 0 ]; then
		echo_failure
		echo_failure >> $PYLOG
    else
		echo_success
		echo_success >> $PYLOG
    fi

    echo
}

# function for check ing the status of the python wrapper
py_status(){

	# check if the pid file exists
	# if id dose gead the pid from the file
    if [ -f $PY_RUN ]; then
    
	    PID=`cat $PY_RUN`
	    
   	 	echo -n $"Status $PYSERV: "
		# verify the python wrapper is running as the pid read from the file
    	if [ $(ps -fp $PID | tail -n 1 | grep -c $PYSERV ) -eq 0 ]; then
			echo_failure
    	else
			echo_success
    	fi
	else
		echo -n $"Status $PYSERV: not running "
	fi
    echo
}

# function for checking the java servers status
jv_status(){

	# check if the java pid file exists
	# if so read the pid
    if [ -f $JAVA_RUN ]; then

    	PID=`cat $JAVA_RUN`
    	
    	echo -n $"Status $JAVASRV: "
    	
    	#verify that the java service is running as the process id read
    	# from the pid file
    	if [ $(ps -fp $PID | tail -n 1 | grep -c $JAVASRV ) -eq 0 ]; then
			echo_failure
    	else
			echo_success
    	fi
	else
		echo -n $"Status $JAVASRV: not running "
	fi

    echo
}
            
# function for shutting down the servers
stop() {
            
    echo -n $"Stopping $PYSERV: " 
    echo  $"Stopping $PYSERV: " >> $PYLOG
    # use the kill proc function
    # to kill the python server
    # passing it the location of the python pid file
    
    killproc -p $PY_RUN 
                
    PY_RETVAL=$?
                
    echo
                
    [ $PY_RETVAL = 0 ] && rm -f $PY_RUN
                
    echo  $"$PYSERV: stopped $PY_RETVAL" >> $PYLOG
    echo -n $"Stopping  $JAVASRV: " 
    echo  $"Stopping  $JAVASRV: "  >> $JAVALOG
    
    # passs killproc the pid file for the java service
    killproc -p $JAVA_RUN 
                
    JV_RETVAL=$?
                
    echo
                
    [ $JV_RETVAL = 0 ] && rm -f $JAVA_RUN
            
    RETVAL=$?
            
    echo
            
    [ $PY_RETVAL -eq 0 ] && [ $JV_RETVAL -eq 0 ]
    echo  $"$JAVASRV: Stopped $JV_RETVAL" >> $JAVALOG
    return $RETVAL
            
}
# See how we were called.
case "$1" in 
          
    # if we were called with start -- start the servers
    start)
          
        jv_start

        py_start
          
        ;;
          
    # if we were called wit stop -- stop the servers
    stop)
          
        stop
          
        ;;
          
    # if we were called with status check that the servers are running
    status)
          
        jv_status 
        py_status 
        ;;
          
    # if we were called with restart -- stop then start the servers
    restart)
          
        stop
          
        jv_start
        py_start
          
        ;;
          
    *)
          
     # else echo out a usage message
        echo $"Usage: $prog {start|stop|restart|status}"
          
        RETVAL=3
        
esac
